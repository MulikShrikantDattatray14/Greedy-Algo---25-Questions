Activity Selection:-

Given two integer arrays A and B of size N.

There are N activities where A[i] denotes the start time of the ith activity and B[i] denotes the finish time of the ith activity.

Your task is to select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.


Input Format:-

The first argument given is the integer array A.
The second argument given is the integer array B.
Output Format

Return the maximum number of activities that can be performed by a single person.
Constraints

1 <= N <= 100000
0 <= A[i] <= B[i] <= 2*10^9 
For Example

Input 1:
    A = [5, 1, 3, 0, 5, 8]
    B = [9, 2, 4, 6, 7, 9]
Output 1:
    4
    Explanation 1:
        Activites 2, 3, 5 and 6 can be selected (1- based indexing).

Input 2:
    A = [17, 8, 14, 24, 10, 8, 1, 30]
    B = [18, 45, 24, 27, 18, 10, 38, 35]
Output 2:
    4

    ========================================================================================================================================================================================================================

    let A = [17, 8, 14, 24, 10, 8, 1, 30]
let B = [18, 45, 24, 27, 18, 10, 38, 35]
let ans = solve(A, B)
console.log(ans)
function solve(A, B) {
    //select the maximum number of activities that can be performed by a single person, assuming that a person can only work on a single activity at a time.
    let n = A.length;
    if (n <= 1) return n;
    let activities = new Array(n);
    for (var i = 0; i < n; i++) {
        activities[i] = [A[i], B[i]];
    }
    // sort the activities array in such a way that end time is small , so that you do more work in the remaining time , so simple logic is choose the work with the small intervals so that you can choose to do more activities.
    activities.sort((a, b) => a[1] - b[1]); // check for minimum end time
    let count = 1;
    let starttime = activities[0][0];
    let endtime = activities[0][1];
    for (let i = 1; i < n; i++) {
        starttime = activities[i][0];
        if (starttime >= endtime) {
            count++;
            endtime = activities[i][1];
        }
    }
    return count;
}