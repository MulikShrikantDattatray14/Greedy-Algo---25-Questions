//also a leetcode question :-1235. Maximum Profit in Job Scheduling
Problem Description:-
logic : same as the 0-1 knap-sack problem

Given N jobs where every job is represented by following three elements of it.
Start Time
Finish Time
Profit Associated
Find and return the maximum profit subset of jobs such that no two jobs in the subset overlap.


Problem Constraints:-
1 <= N <= 105
1 <= A[i][0], A[i][1], A[i][2] <= 105


Input Format:-

The first and the only line of input contains a 2d array, A, of N x 3 integers:
A[i][0] : Start Time
A[i][1] : Finish Time
A[i][2] : Profit


Output Format:-

Return the maximum possible profit under the given conditions.


Example Input
Input 1:
A = [ [1, 2, 50],
      [3, 5, 20],
      [6, 19, 100],
      [2, 100, 200] ]
Input 2:
A = [ [10, 20, 50],
      [20, 30, 20],
      [30, 40, 100] ]


Example Output
Output 1:
250
Output 2:
170


Example Explanation:-
Explanation 1:
We can perform the 1st and the 4th job.
Profit = 50 + 200 = 250.
Explanation 2:
We can perform all the jobs, since no two jobs overlap.
So the total profit is 50 + 20 + 100 = 170

===============================================================================================================================================================================================================================


function find(i, job, n, dp) {
    if (i >= n) return 0;
    if (dp[i] !== -1) return dp[i];

    // Find the next non-overlapping job
    // let index = i + 1;
    // while (index < n && job[index][0] < job[i][1]) {
    //     index++;
    // }

    // Find the next non-overlapping job
    let start = i + 1
    let end = n - 1
    let index = n;
    while (start <= end) {
        let mid = parseInt((start + end) / 2)
        if (job[mid][0] >= job[i][1]) {
            index = mid;
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }

    let pick = job[i][2] + find(index, job, n, dp); // Include current job
    let notpick = find(i + 1, job, n, dp); // Skip current job
    return dp[i] = Math.max(pick, notpick);
}

function jobscheduling(A) {
    let n = A.length;
    let dp = new Array(n).fill(-1);

    // Sort jobs by start times, and if start times are equal, sort by finish times
    A.sort((a, b) => {
        if (a[0] === b[0]) {
            return a[1] - b[1];
        }
        return a[0] - b[0];
    });

    return find(0, A, n, dp);
}
let A = [
    [3, 6, 3],
    [6, 7, 8],
    [3, 7, 7],
    [3, 10, 9],
    [7, 8, 7],
    [6, 6, 3],
    [1, 5, 7],
    [2, 5, 1],
    [5, 7, 8]
];
let ans = jobscheduling(A);
console.log(ans);



=============================================================================================

leetcode submitted code : -



function find(i, job, n, dp) {
    if (i >= n) return 0;
    if (dp[i] !== -1) return dp[i];

    // Find the next non-overlapping job
    // let index = i + 1;
    // while (index < n && job[index][0] < job[i][1]) {
    //     index++;
    // }

    // Find the next non-overlapping start for the job - next_start (lower bound i.e equal to or greater than )
    let start = i + 1
    let end = n - 1
    let next_start = n;
    while (start <= end) {
        let mid = parseInt((start + end) / 2)
        if (job[mid][0] >= job[i][1]) {
            next_start = mid;
            end = mid - 1;
        } else {
            start = mid + 1;
        }
    }

    let pick = job[i][2] + find(next_start, job, n, dp); // Include current job
    let notpick = find(i + 1, job, n, dp); // Skip current job
    return dp[i] = Math.max(pick, notpick);
}

function jobscheduling(A) {
    let n = A.length;
    let dp = new Array(n).fill(-1);

    // Sort jobs by start times, and if start times are equal, sort by finish times
    A.sort((a, b) => {
        if (a[0] === b[0]) {
            return a[1] - b[1];
        }
        return a[0] - b[0];
    });

    return find(0, A, n, dp);
}
let startTime = [1, 2, 3, 3];
let endTime = [3, 4, 5, 6];
let profit = [50, 10, 40, 70]
let n = startTime.length
let A = []
for (let i = 0; i < n; i++) {
    A.push([startTime[i], endTime[i], profit[i]])
}

let ans = jobscheduling(A);
console.log(ans);


========================================================================================
