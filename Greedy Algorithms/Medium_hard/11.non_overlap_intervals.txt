Non-overlapping Intervals :-

Given an array of intervals intervals where intervals[i] = [starti, endi], return the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.


Example 1:-

Input: intervals = [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of the intervals are non-overlapping.
Example 2:

Input: intervals = [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of the intervals non-overlapping.
Example 3:

Input: intervals = [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.
 

Constraints:

1 <= intervals.length <= 105
intervals[i].length == 2
-5 * 104 <= starti < endi <= 5 * 104


===============================================================================================================================================================================================================================


//https://www.youtube.com/watch?v=BTObFnHbD4U


// Example usage:
const intervals = [[1, 3], [2, 4], [3, 5], [6, 8]];
const result = overlap(intervals);
console.log(result);


function overlap(intervals) {
    intervals.sort((a, b) => a[0] - b[0]); // sort all intervals in ascending order
    let count = 0; // count intervals to be removed
    let n = intervals.length; // number of intervals
    let left = 0; // left intervals
    let right = 1; // right intervals

    while (right < n) { // unless all intervals are compared
        if (intervals[left][1] <= intervals[right][0]) { // non-overlapping case
            left = right;
            right += 1;// moving ahead one step by both left and right
        } else if (intervals[left][1] <= intervals[right][1]) { // overlapping - remove right interval
            count += 1; // delete right
            right += 1;
        } else if (intervals[left][1] > intervals[right][1]) { // overlapping - remove left interval
            count += 1;
            left = right;
            right += 1;
        }
    }

    // Return or use the 'count' variable as needed
    return count;
}
