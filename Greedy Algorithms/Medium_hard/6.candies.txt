There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

Each child must have at least one candy.
Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.

 

Example 1:

Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.
Example 2:

Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.
The third child gets 1 candy because it satisfies the above two conditions.
 

Constraints:

n == ratings.length
1 <= n <= 2 * 104
0 <= ratings[i] <= 2 * 104


=======================================================================================================


//for appoach see - https://www.youtube.com/watch?v=PzBYQA6FshA&t=24s
let ratings = [1, 0,2];


let fromfront = [...ratings];
let fromback = ratings.reverse();

let front = new Array(ratings.length).fill(1);
let back = new Array(ratings.length).fill(1);

for (let i = 1; i < fromfront.length; i++) {
  if (fromfront[i] > fromfront[i - 1]) front[i] = front[i - 1] + 1;
}
//console.log(front);

for (let i = 1; i < fromback.length; i++) {
  if (fromback[i] > fromback[i - 1]) back[i] = back[i - 1] + 1;
}
back.reverse()
//console.log(back);

let final = [];
for (let i = 0; i < fromback.length; i++) {
  final[i] = Math.max(front[i], back[i]);
}
const initialValue = 0;
const sumWithInitial = final.reduce(
  (accumulator, currentValue) => accumulator + currentValue,
  initialValue,
);

console.log(sumWithInitial);