 Merge Intervals:-

Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.

 

Example 1:

Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlap, merge them into [1,6].
Example 2:

Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.
 

Constraints:

1 <= intervals.length <= 104
intervals[i].length == 2
0 <= starti <= endi <= 104

=============================================================================================================

//https://www.youtube.com/watch?v=eEvGarwDhl0

function merge(intervals) {
    const n = intervals.length;
    //sort according to first value
    intervals.sort((a, b) => a[0] - b[0]);
    const ans = [];
    let start = 0;
    while (start < n) {
        let i = start;
        let j = start + 1;
        // take end of first interval
        let mergedEnd = intervals[start][1];

        while (j < n && mergedEnd >= intervals[j][0]) {
            mergedEnd = Math.max(mergedEnd, intervals[j][1]);
            i++;
            j++;
        }

        ans.push([intervals[start][0], mergedEnd]);
        start = j;
    }

    return ans;
}

// Example usage:
const inputIntervals = [
    [1, 3],
    [2, 6], [9, 10],
    [8, 10],
    [15, 18],
];

const mergedIntervals = merge(inputIntervals);
console.log(mergedIntervals);